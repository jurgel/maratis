# build the plugin binaries
import os
import sys
import datetime,time


basepath = str(Dir('#').abspath)
sys.path.append(os.path.join(basepath,'var','scons'))

#from version_tag import *
import compileroptions
import platformcustom
    
###############################################
#                ENVIRONMENT                  #
###############################################

# get additional build parameters from configuration file
opts = SConscript('#var/scons/EnvOptions')

tools = ['default']
if sys.platform == 'darwin':
    import macbundle
    tools.append (macbundle.TOOL_BUNDLE)

# create the main environment
env = Environment( options = opts, tools = tools )

env.Append(BASEPATH=basepath)
env.Append(ENV = {'BASEPATH' : str(Dir('#').abspath)})

# configure the building environment
SConscript('#var/scons/EnvConfig', exports='env')

# update the help screen
Help(opts.GenerateHelpText(env))

# save an option file with the differences from the default values
fname = basepath+"/user_configuration"
opts.Save(fname,env)
if (os.path.getsize(fname) == 0):
    os.remove(fname)

# customize the environment, with options not included in the standard scons tools
platformcustom.customizeEnvironment(env)

###############################################
#                   BUILD                     #
###############################################
                        
# get build mode from environment
flags = compileroptions.CompilationFlags(env)

arch_suffix = ''
if sys.platform=='win32':
    arch_suffix = '_'+env['TARGET_ARCH']
# build dir
print "Build in", env['build_mode'], "mode"
builddir = os.path.join(env['build_area'], sys.platform+arch_suffix, env['build_mode'])
env['builddir'] = builddir
env.Append( CCFLAGS = flags.getCppFlags())
env.Append( CPPDEFINES = flags.getCppDefines())
# product dir
proddir = os.path.join(env['prod_area'], sys.platform+arch_suffix, env['build_mode'])
env['proddir'] = proddir

# build 3rdparty libraries
thirdpartydir = os.path.abspath(env['thirdparty_area'])
print 'Using 3rdparty libraries in folder:',thirdpartydir
env['thirdpartydir'] = thirdpartydir
SConscript( os.path.join(thirdpartydir,'SConscript'),
            variant_dir = os.path.join(builddir,'3rdparty'),
            duplicate=False,
            exports='env' )

# build maratis3d SDK
SConscript( 'MSDK/SConscript',
            variant_dir = os.path.join(builddir,'MSDK'),
            duplicate=False,
            exports='env' )

# build maratis3d
SConscript( 'Maratis/SConscript',
            variant_dir = os.path.join(builddir,'Maratis'),
            duplicate=False,
            exports='env' )

# build examples
SConscript( 'Examples/SConscript',
            variant_dir = os.path.join(builddir,'Examples'),
            duplicate=False,
            exports='env' )
